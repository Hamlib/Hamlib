name: C/C++ CI

on:
  push:
    branches: [ master, feature/* ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        configure_args:
          - >-
            --enable-html-matrix=no
            --enable-parallel=no
            --enable-pytest=no
            --enable-shared=yes
            --enable-silent-rules
            --enable-static=yes
            --enable-usrp=no
            --enable-winradio=no
            --with-cxx-binding=no
            --with-indi=no
            --with-libusb=no
            --with-lua-binding=no
            --with-perl-binding=no
            --with-python-binding=no
            --with-readline=no
            --with-tcl-binding=no
            --with-xml-support=no
          - >-
            --enable-html-matrix=yes
            --enable-parallel=yes
            --enable-pytest=yes
            --enable-shared=yes
            --enable-silent-rules
            --enable-static=yes
            --enable-usrp=no
            --enable-winradio=yes
            --with-cxx-binding=yes
            --with-indi=yes
            --with-libusb=yes
            --with-lua-binding=yes
            --with-perl-binding=yes
            --with-python-binding=yes
            --with-readline=yes
            --with-tcl-binding=yes
            --with-xml-support=yes

    steps:
    - uses: actions/checkout@v4
    - name: Install dependencies on Linux
      if: runner.os == 'Linux'
      run: |
        sudo apt update
        sudo apt install libusb-1.0-0-dev
        sudo apt install libgd-dev
        sudo apt install libgpiod-dev
        sudo apt install libindi-dev libnova-dev
        sudo apt install grep
        sudo apt install python3-dev python3-pytest
        sudo apt install lua5.4 liblua5.4-dev libperl-dev tcl-dev
    - name: Install dependencies on macOS
      if: runner.os == 'macOS'
      run: |
        brew install autoconf
        brew install automake
        brew install libnova
        brew install libtool
        brew install grep
        brew install swig
        brew install tcl-tk
    - name: bootstrap
      run: |
        pwd
        ./bootstrap
    - name: Suppress -Winitializer-overrides on macOS
      if: runner.os == 'macOS'
      run: |
        export CFLAGS="$CFLAGS -Wno-initializer-overrides"
        export CXXFLAGS="$CXXFLAGS -Wno-initializer-overrides"
    - name: README Debug
      run: grep README Makefile.am
    - name: configure
      if: runner.os != 'macOS'
      run: ./configure ${{ matrix.configure_args }}
    - name: configure on macOS
      if: runner.os == 'macOS'
      run: ./configure ${{ matrix.configure_args }} --with-indi=detect --without-lua-binding PYTHON=/opt/homebrew/bin/python3
    - name: make
      run: make -j 4 V=0 --no-print-directory
    - name: make distcheck
      if: runner.os != 'macOS'
      run: make distcheck V=0 --no-print-directory AM_DISTCHECK_CONFIGURE_FLAGS="${{ matrix.configure_args }} --without-perl-binding"
    - name: make distcheck on macOS
      if: runner.os == 'macOS'
      run: make distcheck V=0 --no-print-directory AM_DISTCHECK_CONFIGURE_FLAGS="${{ matrix.configure_args }} --with-indi=detect --without-perl-binding --without-lua-binding --without-tcl-binding PYTHON=/opt/homebrew/bin/python3"

    - name: 'Tar files'
      if: runner.os == 'macOS'
      run: tar -cvf hamlib_artifacts /Users/runner/work/Hamlib/Hamlib
      if: runner.os == 'linux'
      run: tar -cvf hamlib_artifacts /home/runner/work/Hamlib/Hamlib

    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v4.6.2
      with:
        name: 'Hamlib build artifacts'
      path: hamlib_artifacts

    # The desired behavior if no files are found using the provided path.
    #Available Options:
    #  warn: Output a warning but do not fail the action
    #  error: Fail the action with an error message
    #  ignore: Do not output any warnings or errors, the action does not fail
    #
    #    if-no-files-found: # optional, default is warn
    #    # Duration after which artifact will expire in days. 0 means using default retention.
    #Minimum 1 day. Maximum 90 days unless changed from the repository settings page.
    #
    #    retention-days: # optional
    #    # The level of compression for Zlib to be applied to the artifact archive. The value can range from 0 to 9: - 0: No compression - 1: Best speed - 6: Default compression (same as GNU Gzip) - 9: Best compression Higher levels will result in better compression, but will take longer to complete. For large files that are not easily compressed, a value of 0 is recommended for significantly faster uploads.
    #
    #    compression-level: # optional, default is 6
    #    # If true, an artifact with a matching name will be deleted before a new one is uploaded. If false, the action will fail if an artifact for the given name already exists. Does not fail if the artifact does not exist.
    #
    #    overwrite: # optional, default is false
    #    # If true, hidden files will be included in the artifact. If false, hidden files will be excluded from the artifact.
    #
    #    include-hidden-files: # optional, default is false
          
