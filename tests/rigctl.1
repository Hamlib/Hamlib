.\"                                      Hey, EMACS: -*- nroff -*-
.\" First parameter, NAME, should be all caps
.\" Second parameter, SECTION, should be 1-8, maybe w/ subsection
.\" other parameters are allowed: see man(7), man(1)
.TH RIGCTL "1" "March 12, 2013" "Hamlib" "Radio Control Program"
.\" Please adjust this date whenever revising the manpage.
.\"
.\" Some roff macros, for reference:
.\" .nh        disable hyphenation
.\" .hy        enable hyphenation
.\" .ad l      left justify
.\" .ad b      justify to both left and right margins
.\" .nf        disable filling
.\" .fi        enable filling
.\" .br        insert line break
.\" .sp <n>    insert n+1 empty lines
.\" for manpage-specific macros, see man(7)
.SH NAME
rigctl \- control radio transceivers and receivers
.SH SYNOPSIS
.B rigctl
[\fIOPTION\fR]... [\fICOMMAND\fR]...
.SH DESCRIPTION
Control radio transceivers and receivers.
\fBrigctl\fP accepts \fBcommands\fP from the command line as well as in
interactive mode if none are provided on the command line.
.PP
.\" TeX users may be more comfortable with the \fB<whatever>\fP and
.\" \fI<whatever>\fP escape sequences to invoke bold face and italics,
.\" respectively.
Keep in mind that \fBHamlib\fP is BETA level software.
While a lot of backend libraries lack complete rig support, the basic functions
are usually well supported.  The API may change without publicized notice,
while an advancement of the major version (e.g. 1.x to 3.x) indicates such
a change.
.PP
Please report bugs and provide feedback at the e-mail address given in the
REPORTING BUGS section.  Patches and code enhancements are also welcome.
.SH OPTIONS
This program follows the usual GNU command line syntax, with long
options starting with two dashes ('-').
.PP
Here is a summary of the supported options:
.TP
.B \-m, --model=id
Select radio model number. See model list (use 'rigctl -l').
.sp
NB: \fBrigctl\fP (or third party software) will use rig model 2
for NET rigctl (rigctld).
.TP
.B \-r, --rig-file=device
Use \fIdevice\fP as the file name of the port the radio is connected.
Often a serial port, but could be a USB to serial adapter.  Typically
/dev/ttyS0, /dev/ttyS1, /dev/ttyUSB0, etc. on Linux or COM1, COM2, etc.
on Win32.  The special string 'uh\-rig' may be given to enable micro-ham
device support.
.TP
.B \-p, --ptt-file=device
Use \fIdevice\fP as the file name of the Push-To-Talk device using a
device file as described above.
.TP
.B \-d, --dcd-file=device
Use \fIdevice\fP as the file name of the Data Carrier Detect device using a
device file as described above.
.TP
.B \-P, --ptt-type=type
Use \fItype\fP of Push-To-Talk device.
Supported types are RIG, DTR, RTS, PARALLEL, NONE, overriding PTT type
defined in the rig's backend.
.sp
Some side effects of this command are that when type is set to DTR, read
PTT state comes from Hamlib frontend, not read from the radio.  When set
to NONE, PTT state cannot be read or set even if rig backend supports
reading/setting PTT status from the rig.
.TP
.B \-D, --dcd-type=type
Use \fItype\fP of Data Carrier Detect device.
Supported types are RIG, DSR, CTS, CD, PARALLEL, NONE.
.TP
.B \-s, --serial-speed=baud
Set serial speed to \fIbaud\fP rate. Uses maximum serial speed from rig
backend capabilities as the default.
.TP
.B \-c, --civaddr=id
Use \fIid\fP as the CI-V address to communicate with the rig. Only useful for
Icom rigs.
.sp
NB: the \fIid\fP is in decimal notation, unless prefixed by
\fI0x\fP, in which case it is hexadecimal.
.TP
.B \-t, --send-cmd-term=char
Change the termination \fIchar\fP for text protocol when using the
\fIsend_cmd\fP command.  The default value is <CR> (0x0d). Non ASCII printable
characters can be specified as an ASCII number, in hexadecimal format,
prepended with 0x. You may pass an empty string for no termination char. The
string '-1' tells rigctl to switch to binary protocol. See the \fIsend_cmd\fP
command for further explanation.
.sp
For example, to specify a command terminator for Kenwood style text commands
pass "-t ';'" to rigctl.  See EXAMPLES below.
.TP
.B \-L, --show-conf
List all config parameters for the radio defined with -m above.
.TP
.B \-C, --set-conf=parm=val[,parm=val]*
Set config parameter.  e.g. stop_bits=2
.sp
Use -L option for a list.
.TP
.B \-l, --list
List all model numbers defined in \fBHamlib\fP and exit.  As of 1.2.15.1
the list is sorted by model number.
.sp
\fBN.B.\fP In Linux the list can be scrolled back using Shift-PageUp/
Shift-PageDown, or using the scrollbars of a virtual terminal in X or
the cmd window in Windows.  The output can be piped to 'more' or 'less',
e.g. 'rigctl -l | more'.
.TP
.B \-u, --dump-caps
Dump capabilities for the radio defined with -m above and exit.
.TP
.B \-o, --vfo
Set vfo mode, requiring an extra VFO argument in front of each appropriate
command. Otherwise, 'currVFO' is assumed when this option is not set.
.TP
.B \-n, --no-restore-ai
On exit 'rigctl' restores the state of auto information (AI) on the
controlled rig. If this is not desired, for example if you are
using 'rigctl' to turn AI mode on or off, pass this option.
.TP
.B \-i, --read-history
Read previously saved command and argument history from a file
(default '~/.rigctl_history') for the current session.  Available when
\fBrigctl\fP is built with Readline support (see READLINE below).
.sp
\fBN.B.\fP To read a history file stored in another directory, set the
RIGCTL_HIST_DIR environment variable, e.g. 'RIGCTL_HIST_DIR=~/tmp rigctl -i'.
When RIGCTL_HIST_DIR is not set, the value of HOME is used.
.TP
.B \-I, --save-history
Write current session and previous session(s), if -i option is given, command and
argument history to a file (default '~/.rigctl_history') at the end of the current
session.  Complete commands with arguments are saved as a single line to be
recalled and used or edited.  Available when \fBrigctl\fP is built with Readline
support (see READLINE below).
.sp
\fBN.B.\fP To write a history file in another directory, set the RIGCTL_HIST_DIR
environment variable, e.g. 'RIGCTL_HIST_DIR=~/tmp rigctl -I'.  When RIGCTL_HIST_DIR
is not set, the value of HOME is used.
.TP
.B \-v, --verbose
Set verbose mode, cumulative (see DIAGNOSTICS below).
.TP
.B \-Z, --debug-time-stamps
Enable time stamps for the debug messages
.TP
.B \-h, --help
Show summary of these options and exit.
.TP
.B \-V, --version
Show version of \fBrigctl\fP and exit.
.sp
.PP
\fBN.B.\fP Some options may not be implemented by a given backend and will
return an error.  This is most likely to occur with the \fI\-\-set-conf\fP
and \fI\-\-show-conf\fP options.
.PP
Please note that the backend for the radio to be controlled,
or the radio itself may not support some commands. In that case,
the operation will fail with a \fBHamlib\fP error code.
.SH COMMANDS
Commands can be entered either as a single char, or as a long command name.
Basically, the commands do not take a dash in front of them on the command
line, as the options do. They may be typed in when in interactive mode
or provided as argument(s) in command line interface mode.  In interactive
mode commands and their arguments may be entered on a single line:
.sp
Rig command: M LSB 2400
.PP
Since most of the \fBHamlib\fP operations have a \fIset\fP and a \fIget\fP
method, an upper case letter will be used for \fIset\fP method whereas the
corresponding lower case letter refers to the \fIget\fP method.  Each operation
also has a long name; in interactive mode, prepend a backslash to enter a long
command name.
.sp
Example: Use '\\dump_caps' to see what this radio and backend support.
.PP
Please note that the backend for the radio to be controlled, or the radio
itself may not support some commands. In that case, the operation will fail
with a \fBHamlib\fP error message.
.PP
As an alternative to the READLINE command history features a special
command of a single dash ('-') may be used to read commands from
standard input.  Commands must be separated by whitespace similar to
the commands given on the command line.  Comments may be added using
the '#' character, all text up until the end of the current line
including the '#' character is ignored.
.sp
Example:
 $ cat <<.EOF. >cmds.txt
 > # File of commands
 > v f m	# query rig
 > V VFOB F 14200000 M CW 500	# set rig
 > v f m	# query rig
 > .EOF.

 $ rigctl -m1 - <cmds.txt

 v VFOA

 f 145000000

 m FM
 15000

 V VFOB
 F 14200000
 M CW 500
 v VFOB

 f 14200000

 m CW
 500

 $
.PP
Here is a summary of the supported commands (In the case of "set" commands the
quoted string is replaced by the value in the description.  In the case of "get"
commands the quoted string is the key name of the value returned.):
.TP
.B Q|q, exit rigctl
Exit rigctl in interactive mode.
.sp
When rigctl is controlling the rig directly, will close the rig backend and
port.  When rigctl is connected to rigctld (rig model 2), the TCP/IP connection
to rigctld is closed and rigctld remains running, available for another TCP/IP
network connection.
.TP
.B F, set_freq 'Frequency'
Set 'Frequency', in Hz.
.TP
.B f, get_freq
Get 'Frequency', in Hz.
.TP
.B M, set_mode 'Mode' 'Passband'
Set 'Mode': USB, LSB, CW, CWR, RTTY, RTTYR, AM, FM, WFM, AMS,
PKTLSB, PKTUSB, PKTFM, ECSSUSB, ECSSLSB, FAX, SAM, SAL, SAH, DSB.
.sp
Set 'Passband' in Hz, or '0' for the Hamlib backend default.
.sp
\fBN.B.\fP Passing a '?' (query) as the first argument instead of 'Mode'
will return a space separated list of radio backend supported Modes.  Use
this to determine the supported Modes of a given radio backend.
.TP
.B m, get_mode
Get 'Mode' 'Passband'.
.sp
Returns Mode as a string from \fIset_mode\fP above
and Passband in Hz.
.TP
.B V, set_vfo 'VFO'
Set 'VFO': VFOA, VFOB, VFOC, currVFO, VFO, MEM, Main, Sub, TX, RX.
.sp
In VFO mode only a single VFO parameter is required.
.TP
.B v, get_vfo
Get current 'VFO'.
.sp
Returns VFO as a string from \fIset_vfo\fP above.
.TP
.B J, set_rit 'RIT'
Set 'RIT', in Hz, can be + or -.
.sp
A value of '0' resets RIT and *should* turn RIT off.  If not, file a bug
report against the Hamlib backend.
.sp
\fBN.B\fP This functionality is under transition and in the future will
need to be activated with the \fIset_func\fP command.
.TP
.B j, get_rit
Get 'RIT', in Hz.
.TP
.B Z, set_xit 'XIT'
Set 'XIT', in Hz can be + or -.
.sp
A value of '0' resets XIT and *should* turn XIT off.  If not, file a bug
report against the Hamlib backend.
.sp
\fBN.B\fP This functionality is under transition and in the future will
need to be activated with the \fIset_func\fP command.
.TP
.B z, get_xit
Get 'XIT', in Hz.
.TP
.B T, set_ptt 'PTT'
Set 'PTT', 0 (RX), 1 (TX), 2 (TX mic), 3 (TX data).
.TP
.B t, get_ptt
Get 'PTT' status.
.TP
.B 0x8b, get_dcd
Get 'DCD' (squelch) status, 0 (Closed) or 1 (Open)
.TP
.B R, set_rptr_shift 'Rptr Shift'
Set 'Rptr Shift': "+", "-" or something else for none.
.TP
.B r, get_rptr_shift
Get 'Rptr Shift'.  Returns "+", "-" or "None".
.TP
.B O, set_rptr_offs 'Rptr Offset'
Set 'Rptr Offset', in Hz.
.TP
.B o, get_rptr_offs
Get 'Rptr Offset', in Hz.
.TP
.B C, set_ctcss_tone 'CTCSS Tone'
Set 'CTCSS Tone', in tenths of Hz.
.TP
.B c, get_ctcss_tone
Get 'CTCSS Tone', in tenths of Hz.
.TP
.B D, set_dcs_code 'DCS Code'
Set 'DCS Code'.
.TP
.B d, get_dcs_code
Get 'DCS Code'.
.TP
.B 0x90, set_ctcss_sql 'CTCSS Sql'
Set 'CTCSS Sql' tone, in tenths of Hz.
.TP
.B 0x91, get_ctcss_sql
Get 'CTCSS Sql' tone, in tenths of Hz.
.TP
.B 0x92, set_dcs_sql 'DCS Sql'
Set 'DCS Sql' code.
.TP
.B 0x93, get_dcs_sql
Get 'DCS Sql' code.
.TP
.B I, set_split_freq 'Tx Frequency'
Set 'TX Frequency', in Hz.
.TP
.B i, get_split_freq
Get 'TX Frequency', in Hz.
.TP
.B X, set_split_mode 'TX Mode' 'TX Passband'
Set 'TX Mode': AM, FM, CW, CWR, USB, LSB, RTTY, RTTYR, WFM, AMS,
PKTLSB, PKTUSB, PKTFM, ECSSUSB, ECSSLSB, FAX, SAM, SAL, SAH, DSB.
.sp
The 'TX Passband' is the exact passband in Hz, or '0' for the Hamlib
backend default.
.sp
\fBN.B.\fP Passing a '?' (query) as the first argument instead of 'TX Mode'
will return a space separated list of radio backend supported TX Modes.  Use
this to determine the supported TX Modes of a given radio backend.
.TP
.B x, get_split_mode
Get 'TX Mode' and 'TX Passband'.
.sp
Returns TX mode as a string from \fIset_split_mode\fP above and TX passband in
Hz.
.TP
.B S, set_split_vfo 'Split' 'TX VFO'
Set 'Split' mode, '0' or '1', and 'TX VFO' from \fIset_vfo\fP above.
.TP
.B s, get_split_vfo
Get 'Split' mode, '0' or '1', and 'TX VFO'.
.TP
.B N, set_ts 'Tuning Step'
Set 'Tuning Step', in Hz.
.TP
.B n, get_ts
Get 'Tuning Step', in Hz.
.TP
.B U, set_func 'Func' 'Func Status'
Set 'Func' 'Func Status'.
.sp
Func is one of: FAGC, NB, COMP, VOX, TONE, TSQL,
SBKIN, FBKIN, ANF, NR, AIP, APF, MON, MN, RF, ARO, LOCK, MUTE, VSC, REV, SQL,
ABM, BC, MBC, RIT, AFC, SATMODE, SCOPE, RESUME, TBURST, TUNER, XIT.
.sp
Func Status argument is a non null value for "activate", "de-activate"
otherwise, much as TRUE/FALSE definitions in C language (true is non-zero and
false is zero).
.sp
\fBN.B.\fP Passing a '?' (query) as the first argument instead of 'Func' will
return a space separated list of radio backend supported Set functions.  Use
this to determine the supported functions of a given radio backend.
.TP
.B u, get_func 'Func'
Get 'Func Status'.
.sp
Returns 'Func Status' as a non null value for the 'Func' passed.
.sp
\fBN.B.\fP Passing a '?' (query) as the first argument instead of 'Func' will
return a space separated list of radio backend supported Get functions.  Use
this to determine the supported functions of a given radio backend.
.TP
.B L, set_level 'Level' 'Level Value'
Set 'Level' 'Level Value'.
.sp
Level is one of: PREAMP, ATT, VOX, AF, RF, SQL, IF, APF, NR, PBT_IN, PBT_OUT,
CWPITCH, RFPOWER, MICGAIN, KEYSPD, NOTCHF, COMP, AGC (0:OFF, 1:SUPERFAST,
2:FAST, 3:SLOW, 4:USER, 5:MEDIUM, 6:AUTO), BKINDL, BAL, METER, VOXGAIN,
ANTIVOX, SLOPE_LOW, SLOPE_HIGH, RAWSTR, SWR, ALC, STRENGTH.
.sp
The Level Value can be a float or an integer.
.sp
\fBN.B.\fP Passing a '?' (query) as the first argument instead of 'Level' will
return a space separated list of radio backend supported Set levels.  Use
this to determine the supported levels of a given radio backend.
.TP
.B l, get_level 'Level'
Get 'Level Value'.
.sp
Returns 'Level Value' as a float or integer for the 'Level' passed.
.sp
\fBN.B.\fP Passing a '?' (query) as the first argument instead of 'Level' will
return a space separated list of radio backend supported Get levels.  Use
this to determine the supported levels of a given radio backend.
.TP
.B P, set_parm 'Parm' 'Parm Value'
Set 'Parm' 'Parm Value'
.sp
Parm is one of: ANN, APO, BACKLIGHT, BEEP, TIME, BAT, KEYLIGHT.
.sp
\fBN.B.\fP Passing a '?' (query) as the first argument instead of 'Parm' will
return a space separated list of radio backend supported Set parameters.  Use
this to determine the supported parameters of a given radio backend.
.TP
.B p, get_parm 'Parm'
Get 'Parm Value'.
.sp
Returns 'Parm Value' as a float or integer for the 'Parm' passed.
.sp
\fBN.B.\fP Passing a '?' (query) as the first argument instead of 'Parm' will
return a space separated list of radio backend supported Get parameters.  Use
this to determine the supported parameters of a given radio backend.
.TP
.B B, set_bank 'Bank'
Set 'Bank'.  Sets the current memory bank number.
.TP
.B E, set_mem 'Memory#'
Set 'Memory#' channel number.
.TP
.B e, get_mem
Get 'Memory#' channel number.
.TP
.B G, vfo_op 'Mem/VFO Op'
Perform 'Mem/VFO Op'.
.sp
Mem VFO operation is one of: CPY, XCHG, FROM_VFO, TO_VFO, MCL, UP, DOWN,
BAND_UP, BAND_DOWN, LEFT, RIGHT, TUNE, TOGGLE.
.sp
\fBN.B.\fP Passing a '?' (query) as the first argument instead of 'Mem/VFO Op'
will return a space separated list of radio backend supported Set Mem/VFO Ops.
Use this to determine the supported Mem/VFO Ops of a given radio backend.
.TP
.B g, scan 'Scan Fct' 'Scan Channel'
Perform 'Scan Fct' 'Scan Channel'.
.sp
Scan function/channel is one of: STOP, MEM, SLCT, PRIO, PROG, DELTA, VFO, PLT.
.sp
\fBN.B.\fP Passing a '?' (query) as the first argument instead of 'Scan Fct'
will return a space separated list of radio backend supported Scan Functions.
Use this to determine the supported Scan Functions of a given radio backend.
.TP
.B H, set_channel 'Channel'
Set memory 'Channel' data. Not implemented yet.
.TP
.B h, get_channel
Get memory 'Channel' data. Not implemented yet.
.TP
.B A, set_trn 'Transceive'
Set 'Transceive' mode (reporting event): OFF, RIG, POLL.
.sp
\fBN.B.\fP Passing a '?' (query) as the first argument instead of 'Transceive'
will return a space separated list of radio backend supported Scan Transceive
modes.  Use this to determine the supported Transceive modes of a given radio
backend.
.TP
.B a, get_trn
Get 'Transceive' mode (reporting event) as in \fIset_trn\fP above.
.TP
.B Y, set_ant 'Antenna'
Set 'Antenna' number (0, 1, 2, ..).
.TP
.B y, get_ant
Get 'Antenna' number (0, 1, 2, ..).
.TP
.B *, reset 'Reset'
Perform rig 'Reset'.
.sp
0 = None, 1 = Software reset, 2 = VFO reset, 4 = Memory Clear reset, 8 = Master
reset.  Since these values are defined as a bitmask in rig.h, it should be
possible to AND these values together to do multiple resets at once, if the
backend supports it or supports a reset action via rig control at all.
.TP
.B b, send_morse 'Morse'
Send 'Morse' symbols.
.TP
.B 0x87, set_powerstat 'Power Status'
Set power On/Off/Standby 'Power Status'.
.sp
0 = Power Off, 1 = Power On, 2 = Power Standby.  Defined as a bitmask in rig.h.
.TP
.B 0x88, get_powerstat
Get power On/Off/Standby 'Power Status' as in \fIset_powerstat\fP above.
.TP
.B 0x89, send_dtmf 'Digits'
Set DTMF 'Digits'.
.TP
.B 0x8a, recv_dtmf
Get DTMF 'Digits'.
.TP
.B _, get_info
Get misc information about the rig (no VFO in 'VFO mode' or value is passed).
.TP
.B 1, dump_caps
Not a real rig remote command, it just dumps capabilities, i.e. what the
backend knows about this model, and what it can do.
.sp
TODO: Ensure this is in a consistent format so it can be read into a hash,
dictionary, etc.  Bug reports requested.
.sp
\fBN.B.\fP: This command will produce many lines of output so be very careful
if using a fixed length array!  For example, running this command against the
Dummy backend results in over 5kB of text output.
.sp
VFO parameter not used in 'VFO mode'.
.TP
.B 2, power2mW 'Power [0.0..1.0]' 'Frequency' 'Mode'
Returns 'Power mW'
.sp
Converts a Power value in a range of \fI0.0 ... 1.0\fP to the real transmit
power in milli-Watts (integer).  The \fIfrequency\fP and \fImode\fP also need to
be provided as output power may vary according to these values.
.sp
VFO parameter not used in 'VFO mode'.
.TP
.B 4, mW2power 'Power mW' 'Frequency' 'Mode'
Returns 'Power [0.0..1.0]'
.sp
Converts the real transmit power in milli-Watts (integer) to a Power value in
a range of \fI0.0 ... 1.0\fP.  The \fIfrequency\fP and \fImode\fP also need to
be provided as output power may vary according to these values.
.sp
VFO parameter not used in 'VFO mode'.
.TP
.B w, send_cmd 'Cmd'
Send raw command string to rig.  This is useful for testing and troubleshooting
rig commands and responses when developing a backend.
.sp
For binary protocols enter values as \\0xAA\\0xBB.    Expect a 'Reply' from the
rig which will likely be a binary block or an ASCII string depending on the
rig's protocol (see your radio's computer control documentation).
.sp
The command terminator, set by the \fIsend-cmd-term\fP option above, will
terminate each command string sent to the radio.  This character should not be
a part of the input string.
.TP
.B pause 'Seconds'
Pause for the given whole number of seconds before sending the next command.
.SH EXAMPLES
Start \fBrigctl\fP for a Yaesu FT-920 using a USB to serial adapter on Linux in
interactive mode:
.sp
$ rigctl -m 114 -r /dev/ttyUSB1
.sp
Start \fBrigctl\fP for a Yaesu FT-920 using COM1 on Win32 while generating
TRACE output to \fBstderr\fP:
.sp
$ rigctl -m 114 -r COM1 -vvvvv
.sp
Start \fBrigctl\fP for a Yaesu FT-920 using a USB to serial adapter while
setting baud rate and stop bits:
.sp
$ rigctl -m 114 -r /dev/ttyUSB1 -s 4800 -C stop_bits=2
.sp
Start \fBrigctl\fP for an Elecraft K3 using a USB to serial adapter while
specifying a command terminator for the 'w' command:
.sp
$ rigctl -m 229 -r /dev/ttyUSB0 -t';'
.sp
Connect to a running \fBrigctld\fP with rig model 2 ("NET rigctl") on the
local host and specifying the TCP port, setting frequency and mode:
.sp
$ rigctl -m 2 -r localhost:4532 F 7253500 M LSB 0
.SH READLINE
If Readline library development files are found at configure time, \fBrigctl\fP
will be conditonally built with Readline support for command and argument entry.
Readline command key bindings are at their defaults as described in the Readline
manual (\fIhttp://cnswww.cns.cwru.edu/php/chet/readline/rluserman.html\fP)
although \fBrigctl\fP sets the name 'rigctl' which can be used in Conditional
Init Constructs in the Readline Init File ('~/.inputrc' by default) for custom
keybindings unique to \fBrigctl\fP.

Command history is available with Readline support as described in the Readline
History manual
(\fIhttp://cnswww.cns.cwru.edu/php/chet/readline/history.html#SEC1\fP).  Command
and argument strings are stored as single lines even when arguments are prompted
for input individually.  Commands and arguments are not validated and are stored
as typed with values separated by a single space.

Normally session history is not saved, however, use of either of the
\fI-i/--read-history\fP or \fI-I/--save-history\fP options when starting
\fBrigctl\fP will cause any previously saved history to be read in and/or the
current and any previous session history (assuming the -i and -I options are
given together) will be written out when \fBrigctl\fP is closed.  Each option is
mutually exclusive, i.e. either may be given separately or in combination.  This
is useful to save a set of commands and then read them later but not write the
modified history for a consistent set of test commands in interactive mode, for
example.

History is stored in '~/.rigctl_history' by default although the destination
directory may be changed by setting the RIGCTL_HIST_DIR environment variable.
When RIGCTL_HIST_DIR is unset, the value of the HOME environment variable is
used instead.  Only the destination directory may be changed at this time.

If Readline support is not found at configure time the original internal command
handler is used.  Readline is not used for \fBrigctl\fP commands entered on the
command line regardless if Readline support is built in or not.

\fBN.B.\fP Readline support is not included in the Windows 32 binary builds
supplied by the Hamlib Project.  Running \fBrigctl\fP on the Windows 32 platform
in the 'cmd' shell does give session command line history, however, it is not
saved to disk between sessions.
.SH DIAGNOSTICS
The \fB-v\fP, \fB--verbose\fP option allows different levels of diagnostics
to be output to \fBstderr\fP and correspond to -v for BUG, -vv for ERR,
-vvv for WARN, -vvvv for VERBOSE, or -vvvvv for TRACE.

A given verbose level is useful for providing needed debugging information to
the email address below.  For example, TRACE output shows all of the values
sent to and received from the radio which is very useful for radio backend
library development and may be requested by the developers.
.SH EXIT STATUS
\fBrigctl\fP exits with:
.br
0 if all operations completed normally;
.br
1 if there was an invalid command line option or argument;
.br
2 if an error was returned by \fBHamlib\fP.
.SH BUGS
set_chan has no entry method as of yet, hence left unimplemented.

This almost empty section...
.SH REPORTING BUGS
Report bugs to <hamlib-developer@lists.sourceforge.net>.
.PP
We are already aware of the bugs in the previous section :-)
.SH AUTHORS
Written by Stephane Fillod, Nate Bargmann, and the Hamlib Group
.PP
<http://www.hamlib.org>.
.SH COPYRIGHT
Copyright \(co 2000-2011 Stephane Fillod
.br
Copyright \(co 2010-2013 Nate Bargmann
.br
Copyright \(co 2000-2010 the Hamlib Group.
.sp
This is free software; see the source for copying conditions.
There is NO warranty; not even for MERCHANTABILITY
or FITNESS FOR A PARTICULAR PURPOSE.
.SH SEE ALSO
.BR rigctld (1),
.BR hamlib (3)
